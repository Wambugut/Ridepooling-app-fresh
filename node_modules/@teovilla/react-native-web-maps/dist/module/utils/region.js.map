{"version":3,"names":["getBoundByRegion","region","scale","arguments","length","undefined","calcMinLatByOffset","lng","offset","factValue","calcMaxLatByOffset","calcMinLngByOffset","calcMaxLngByOffset","latOffset","latitudeDelta","lngD","longitudeDelta","lngOffset","longitude","latitude"],"sources":["region.ts"],"sourcesContent":["import type { BBox } from 'geojson';\nimport type { Region } from 'react-native-maps';\n\n/**\n * Code taken from https://github.com/react-native-maps/react-native-maps/issues/356\n * Solution by https://github.com/MatsMaker\n */\n\nexport const getBoundByRegion = (region: Region, scale = 1): BBox => {\n  /*\n   * Latitude : max/min +90 to -90\n   * Longitude : max/min +180 to -180\n   */\n  // Of course we can do it mo compact but it wait is more obvious\n  const calcMinLatByOffset = (lng: number, offset: number) => {\n    const factValue = lng - offset;\n    if (factValue < -90) {\n      return (90 + offset) * -1;\n    }\n    return factValue;\n  };\n\n  const calcMaxLatByOffset = (lng: number, offset: number) => {\n    const factValue = lng + offset;\n    if (90 < factValue) {\n      return (90 - offset) * -1;\n    }\n    return factValue;\n  };\n\n  const calcMinLngByOffset = (lng: number, offset: number) => {\n    const factValue = lng - offset;\n    if (factValue < -180) {\n      return (180 + offset) * -1;\n    }\n    return factValue;\n  };\n\n  const calcMaxLngByOffset = (lng: number, offset: number) => {\n    const factValue = lng + offset;\n    if (180 < factValue) {\n      return (180 - offset) * -1;\n    }\n    return factValue;\n  };\n\n  const latOffset = (region.latitudeDelta / 2) * scale;\n  const lngD =\n    region.longitudeDelta < -180\n      ? 360 + region.longitudeDelta\n      : region.longitudeDelta;\n  const lngOffset = (lngD / 2) * scale;\n\n  // bounds.nw.lng,\n  //           bounds.se.lat,\n  //           bounds.se.lng,\n  //           bounds.nw.lat\n\n  return [\n    calcMinLngByOffset(region.longitude, lngOffset), // westLng - min lng\n    calcMinLatByOffset(region.latitude, latOffset), // southLat - min lat\n    calcMaxLngByOffset(region.longitude, lngOffset), // eastLng - max lng\n    calcMaxLatByOffset(region.latitude, latOffset), // northLat - max lat\n  ];\n};\n"],"mappings":"AAGA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,gBAAgB,GAAG,SAAAA,CAACC,MAAc,EAAsB;EAAA,IAApBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACxD;AACF;AACA;AACA;EACE;EACA,MAAMG,kBAAkB,GAAGA,CAACC,GAAW,EAAEC,MAAc,KAAK;IAC1D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAM;IAC9B,IAAIC,SAAS,GAAG,CAAC,EAAE,EAAE;MACnB,OAAO,CAAC,EAAE,GAAGD,MAAM,IAAI,CAAC,CAAC;IAC3B;IACA,OAAOC,SAAS;EAClB,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACH,GAAW,EAAEC,MAAc,KAAK;IAC1D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAM;IAC9B,IAAI,EAAE,GAAGC,SAAS,EAAE;MAClB,OAAO,CAAC,EAAE,GAAGD,MAAM,IAAI,CAAC,CAAC;IAC3B;IACA,OAAOC,SAAS;EAClB,CAAC;EAED,MAAME,kBAAkB,GAAGA,CAACJ,GAAW,EAAEC,MAAc,KAAK;IAC1D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAM;IAC9B,IAAIC,SAAS,GAAG,CAAC,GAAG,EAAE;MACpB,OAAO,CAAC,GAAG,GAAGD,MAAM,IAAI,CAAC,CAAC;IAC5B;IACA,OAAOC,SAAS;EAClB,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAACL,GAAW,EAAEC,MAAc,KAAK;IAC1D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAM;IAC9B,IAAI,GAAG,GAAGC,SAAS,EAAE;MACnB,OAAO,CAAC,GAAG,GAAGD,MAAM,IAAI,CAAC,CAAC;IAC5B;IACA,OAAOC,SAAS;EAClB,CAAC;EAED,MAAMI,SAAS,GAAIZ,MAAM,CAACa,aAAa,GAAG,CAAC,GAAIZ,KAAK;EACpD,MAAMa,IAAI,GACRd,MAAM,CAACe,cAAc,GAAG,CAAC,GAAG,GACxB,GAAG,GAAGf,MAAM,CAACe,cAAc,GAC3Bf,MAAM,CAACe,cAAc;EAC3B,MAAMC,SAAS,GAAIF,IAAI,GAAG,CAAC,GAAIb,KAAK;;EAEpC;EACA;EACA;EACA;;EAEA,OAAO,CACLS,kBAAkB,CAACV,MAAM,CAACiB,SAAS,EAAED,SAAS,CAAC;EAAE;EACjDX,kBAAkB,CAACL,MAAM,CAACkB,QAAQ,EAAEN,SAAS,CAAC;EAAE;EAChDD,kBAAkB,CAACX,MAAM,CAACiB,SAAS,EAAED,SAAS,CAAC;EAAE;EACjDP,kBAAkB,CAACT,MAAM,CAACkB,QAAQ,EAAEN,SAAS,CAAC,CAAE;EAAA,CACjD;AACH,CAAC"}