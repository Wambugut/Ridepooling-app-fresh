import * as Location from 'expo-location';
import { useCallback, useEffect, useState } from 'react';
export function useUserLocation(options) {
  const [location, setLocation] = useState();
  const [watchPositionSubscription, setWatchPositionSubscription] = useState();
  const [permission] = Location.useForegroundPermissions({
    request: options.requestPermission,
    get: options.showUserLocation
  });
  const handleLocationChange = useCallback(function (e) {
    var _options$onUserLocati;
    setLocation(e);
    (_options$onUserLocati = options.onUserLocationChange) === null || _options$onUserLocati === void 0 ? void 0 : _options$onUserLocati.call(options, {
      nativeEvent: {
        coordinate: {
          ...e.coords,
          timestamp: Date.now(),
          altitude: e.coords.altitude || 0,
          heading: e.coords.heading || 0,
          accuracy: e.coords.accuracy || Location.Accuracy.Balanced,
          isFromMockProvider: e.mocked || false,
          speed: e.coords.speed || 0
        }
      }
    });
  }, [options.onUserLocationChange]);
  useEffect(() => {
    if (permission !== null && permission !== void 0 && permission.granted && options.followUserLocation) {
      Location.getCurrentPositionAsync().then(handleLocationChange);
      // Watch position
      Location.watchPositionAsync({
        accuracy: Location.Accuracy.Balanced
      }, handleLocationChange).then(setWatchPositionSubscription);
    }
    return () => watchPositionSubscription === null || watchPositionSubscription === void 0 ? void 0 : watchPositionSubscription.remove();
  }, [permission, options.followUserLocation]);
  return location;
}
//# sourceMappingURL=use-user-location.js.map