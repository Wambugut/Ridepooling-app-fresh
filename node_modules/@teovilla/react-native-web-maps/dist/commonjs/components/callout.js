"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Callout = Callout;
exports.CalloutContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _api = require("@react-google-maps/api");
var _mouseEvent = require("../utils/mouse-event");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CalloutContext = /*#__PURE__*/React.createContext({
  coordinate: {
    latitude: 0,
    longitude: 0
  },
  calloutVisible: false,
  toggleCalloutVisible: () => {},
  markerSize: {
    width: 0,
    height: 0
  },
  anchor: {
    x: 0,
    y: 0
  }
});
exports.CalloutContext = CalloutContext;
function Callout(props) {
  const map = (0, _api.useGoogleMap)();
  const {
    coordinate,
    calloutVisible,
    toggleCalloutVisible,
    markerSize,
    anchor
  } = React.useContext(CalloutContext);

  //By default callout is positioned to bottom center
  //i.e. is at anchor: (0.5, 1)
  //This compensates to match expected result using the provided anchor prop
  const xOffset = -(markerSize.width * (0.5 - anchor.x));
  const yOffset = -(markerSize.height * (1 - anchor.y));
  return calloutVisible ? /*#__PURE__*/React.createElement("div", {
    onClick: e => {
      var _props$onPress;
      (_props$onPress = props.onPress) === null || _props$onPress === void 0 ? void 0 : _props$onPress.call(props, (0, _mouseEvent.mapMouseEventToMapEvent)(null, coordinate, map, 'callout-press'));
      e.stopPropagation(); //Prevent marker click handler from being called
    }
  }, props.tooltip ? /*#__PURE__*/React.createElement(_api.OverlayView, {
    mapPaneName: "overlayMouseTarget",
    position: {
      lat: Number(coordinate.latitude),
      lng: Number(coordinate.longitude)
    },
    getPixelPositionOffset: () => ({
      x: xOffset,
      y: yOffset
    })
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      transform: 'translate(-50%,-100%)'
    }
  }, props.children)) : /*#__PURE__*/React.createElement(_api.InfoWindow, {
    position: {
      lat: Number(coordinate.latitude),
      lng: Number(coordinate.longitude)
    },
    options: {
      pixelOffset: new google.maps.Size(xOffset, yOffset)
    },
    onCloseClick: () => toggleCalloutVisible()
  }, /*#__PURE__*/React.createElement(React.Fragment, null, props.children))) : null;
}
//# sourceMappingURL=callout.js.map