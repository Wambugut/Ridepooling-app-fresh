"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserLocation = useUserLocation;
var Location = _interopRequireWildcard(require("expo-location"));
var _react = require("react");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function useUserLocation(options) {
  const [location, setLocation] = (0, _react.useState)();
  const [watchPositionSubscription, setWatchPositionSubscription] = (0, _react.useState)();
  const [permission] = Location.useForegroundPermissions({
    request: options.requestPermission,
    get: options.showUserLocation
  });
  const handleLocationChange = (0, _react.useCallback)(function (e) {
    var _options$onUserLocati;
    setLocation(e);
    (_options$onUserLocati = options.onUserLocationChange) === null || _options$onUserLocati === void 0 ? void 0 : _options$onUserLocati.call(options, {
      nativeEvent: {
        coordinate: {
          ...e.coords,
          timestamp: Date.now(),
          altitude: e.coords.altitude || 0,
          heading: e.coords.heading || 0,
          accuracy: e.coords.accuracy || Location.Accuracy.Balanced,
          isFromMockProvider: e.mocked || false,
          speed: e.coords.speed || 0
        }
      }
    });
  }, [options.onUserLocationChange]);
  (0, _react.useEffect)(() => {
    if (permission !== null && permission !== void 0 && permission.granted && options.followUserLocation) {
      Location.getCurrentPositionAsync().then(handleLocationChange);
      // Watch position
      Location.watchPositionAsync({
        accuracy: Location.Accuracy.Balanced
      }, handleLocationChange).then(setWatchPositionSubscription);
    }
    return () => watchPositionSubscription === null || watchPositionSubscription === void 0 ? void 0 : watchPositionSubscription.remove();
  }, [permission, options.followUserLocation]);
  return location;
}
//# sourceMappingURL=use-user-location.js.map